//import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { createSlice } from "@reduxjs/toolkit";
//import { fetchCount } from "./counterAPI";

const initialState = {
    idcount: 3,
    tasks: [
        {
            id: 1,
            title: "A",
            completed: false,
        },
        {
            id: 2,
            title: "B",
            completed: true,
        },
        {
            id: 3,
            title: "C",
            completed: false,
        },
    ],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//     "counter/fetchCount",
//     async (amount) => {
//         const response = await fetchCount(amount);
//         // The value we return becomes the `fulfilled` action payload
//         return response.data;
//     }
// );

export const taskSlice = createSlice({
    name: "task",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        newTask: (state, action) => {
            state.idcount += 1;
            const newItem = {
                id: state.idcount,
                title: action.payload,
                completed: false,
            };
            state.tasks = [newItem, ...state.tasks];
        },
        completeTask: (state, action) => {
            const task = state.tasks.find((t) => t.id === action.payload.id);
            if (task) {
                task.completed = !task.completed;
            }
        },
        deleteTask: (state, action) => {
            state.tasks = state.tasks.filter((t) => t.id !== action.payload.id);
        },
    },
    // // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // // including actions generated by createAsyncThunk or in other slices.
    // extraReducers: (builder) => {
    //     builder
    //         .addCase(incrementAsync.pending, (state) => {
    //             state.status = "loading";
    //         })
    //         .addCase(incrementAsync.fulfilled, (state, action) => {
    //             state.status = "idle";
    //             state.value += action.payload;
    //         });
    // },
});

export const { newTask, completeTask, deleteTask } = taskSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTasks = (state) => state.task.tasks;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//         dispatch(incrementByAmount(amount));
//     }
// };

export default taskSlice.reducer;
